import unittest
import sys
import os

sys.path.insert(0, os.path.abspath(os.path.join(os.path.dirname(__file__), '../src')))

from trajectory.generator import generate_vehicle_trajectory
from trajectory.visualization import plot_fence_and_trajectory_on_map

class TestTrajectory(unittest.TestCase):

    def test_generate_vehicle_trajectory(self):
        # fence = "111.674305,28.93043;111.719723,29.004756;111.821483,28.95066;111.797912,28.886923;111.694427,28.883886;111.67488,28.932453;111.674305,28.93043;"
        fence = "115.311505,26.41368;115.30703,26.409965;115.306071,26.40945;115.305083,26.409586;115.301263,26.41179;115.300275,26.411753;115.298139,26.410562;115.295664,26.412267;115.293058,26.412603;115.291264,26.41211;115.29011,26.412513;115.287756,26.415415;115.286221,26.415198;115.285665,26.414459;115.285429,26.413725;115.284531,26.413154;115.282326,26.414104;115.2792,26.415084;115.278174,26.416206;115.277063,26.416331;115.273812,26.417573;115.272312,26.418178;115.270727,26.419382;115.268234,26.419202;115.267548,26.419568;115.267274,26.420258;115.266717,26.420681;115.264955,26.42147;115.261602,26.419772;115.260464,26.420296;115.259862,26.421164;115.25883,26.421383;115.256184,26.420001;115.255152,26.420415;115.253998,26.420446;115.252621,26.421193;115.251603,26.421166;115.250831,26.422427;115.250855,26.422772;115.250748,26.42333;115.249523,26.423078;115.24823,26.424077;115.247173,26.423882;115.245949,26.424574;115.245819,26.425133;115.24513,26.425394;115.244441,26.426558;115.243753,26.427914;115.244121,26.429062;115.243922,26.430065;115.241709,26.43114;115.24177,26.432446;115.240583,26.43333;115.238714,26.433404;115.237289,26.432987;115.236645,26.433325;115.236063,26.43443;115.235052,26.434622;115.234378,26.43546;115.233413,26.43615;115.231582,26.437334;115.230762,26.437639;115.230693,26.438504;115.229536,26.439292;115.228502,26.440461;115.226711,26.438627;115.225723,26.43893;115.225524,26.440047;115.222707,26.440683;115.221436,26.44047;115.220235,26.441235;115.218705,26.440867;115.217114,26.442901;115.216188,26.443947;115.215882,26.444371;115.215844,26.445889;115.215048,26.446665;115.214421,26.447842;115.212701,26.449198;115.212509,26.450639;115.212142,26.45139;115.212936,26.451809;115.212102,26.453156;115.211643,26.453679;115.210597,26.454105;115.210314,26.454837;115.210596,26.455469;115.211535,26.455657;115.210977,26.456295;115.209817,26.455569;115.209092,26.455283;115.208336,26.455475;115.207649,26.455267;115.207177,26.454537;115.206795,26.454133;115.206025,26.453904;115.205613,26.453904;115.204323,26.454804;115.202845,26.454512;115.202029,26.453855;115.20113,26.454158;115.19894,26.457468;115.199351,26.458085;115.199328,26.458392;115.198688,26.458466;115.197589,26.460609;115.197009,26.462062;115.196749,26.462752;115.196642,26.463558;115.196108,26.464398;115.19587,26.466278;115.195831,26.467199;115.195381,26.467886;115.195016,26.468401;115.194224,26.468912;115.193492,26.469384;115.193066,26.469936;115.192206,26.470097;115.191117,26.471411;115.189664,26.47137;115.188402,26.470814;115.187354,26.469511;115.186497,26.468213;115.185798,26.467836;115.182863,26.468786;115.181578,26.46957;115.181175,26.470044;115.181599,26.471281;115.180959,26.473343;115.18085,26.475435;115.18025,26.475788;115.179072,26.475805;115.177963,26.475728;115.177347,26.4761;115.17632,26.476909;115.17493,26.477094;115.173045,26.477348;115.172339,26.477375;115.171875,26.478019;115.17249,26.478356;115.172916,26.477883;115.173584,26.477857;115.176594,26.477374;115.178304,26.476196;115.179755,26.476396;115.181062,26.476186;115.18177,26.475623;115.181772,26.473376;115.182458,26.471161;115.182178,26.47008;115.183888,26.469091;115.185728,26.468584;115.186966,26.470102;115.187953,26.471366;115.189276,26.472017;115.191519,26.472011;115.192997,26.47053;115.193682,26.470443;115.194009,26.470061;115.194071,26.469679;115.195891,26.468564;115.196067,26.46795;115.196623,26.467303;115.196494,26.466726;115.19677,26.464808;115.19735,26.463909;115.197587,26.463316;115.19761,26.462374;115.19916,26.458929;115.199731,26.458992;115.200204,26.458628;115.200098,26.457975;115.199732,26.457531;115.201304,26.455619;115.201922,26.454699;115.202821,26.45528;115.204559,26.455399;115.206147,26.45448;115.207244,26.455748;115.208312,26.456149;115.209305,26.455916;115.210915,26.456947;115.211496,26.45679;115.212291,26.455289;115.211047,26.454948;115.211047,26.454508;115.211796,26.454255;115.212828,26.453557;115.213708,26.451745;115.213563,26.45117;115.213089,26.451116;115.213411,26.450193;115.213281,26.449482;115.215392,26.447623;115.216294,26.44625;115.216532,26.44575;115.216639,26.44425;115.217825,26.443375;115.218552,26.442061;115.219026,26.441727;115.220235,26.442041;115.221719,26.441235;115.222898,26.441565;115.224666,26.440868;115.225983,26.440654;115.226327,26.440246;115.226435,26.439495;115.226603,26.439512;115.22766,26.44086;115.228395,26.441213;115.229276,26.440967;115.230003,26.439994;115.23093,26.439209;115.231582,26.4387;115.231582,26.438277;115.232033,26.438498;115.232531,26.438317;115.232225,26.43763;115.233949,26.436698;115.235067,26.43564;115.235542,26.435189;115.236776,26.43484;115.237442,26.433791;115.238798,26.434093;115.24082,26.43398;115.242544,26.432779;115.242674,26.431566;115.244443,26.430613;115.245109,26.429622;115.244679,26.427862;115.245796,26.425826;115.246746,26.425599;115.246784,26.424944;115.247281,26.424515;115.248743,26.424741;115.249906,26.423803;115.251483,26.423994;115.252148,26.423524;115.252163,26.42287;115.251719,26.422318;115.25204,26.422026;115.252874,26.422151;115.254488,26.421229;115.25617,26.420867;115.258487,26.422154;115.260595,26.421755;115.261236,26.420809;115.262099,26.420653;115.26478,26.422413;115.267595,26.421046;115.268471,26.42005;115.26873,26.419722;115.270979,26.419902;115.272244,26.419082;115.272716,26.418604;115.274171,26.418075;115.277558,26.417219;115.277832,26.416857;115.279376,26.416162;115.279696,26.415533;115.283566,26.414371;115.284509,26.414018;115.284935,26.414179;115.285232,26.415048;115.285986,26.415771;115.288076,26.416111;115.290794,26.412908;115.291516,26.412864;115.293059,26.413296;115.296242,26.412777;115.298504,26.411317;115.300002,26.412383;115.301712,26.412452;115.305533,26.410172;115.305966,26.410236;115.310905,26.414345;"
        num_points = 100
        total_distance = 20000  # 设定路径总长度
        error_margin = 0.0003  # 设置随机误差范围
        trajectory = generate_vehicle_trajectory(fence, num_points, total_distance, error_margin)
        plot_fence_and_trajectory_on_map(fence, trajectory, map_file="vehicle_trajectory.html")

        fence = "111.674305,28.93043;111.719723,29.004756;111.821483,28.95066;111.797912,28.886923;111.694427,28.883886;111.67488,28.932453;111.674305,28.93043;"
        num_points = 100
        total_distance = 20000  # 设定路径总长度
        error_margin = 0.0003  # 设置随机误差范围
        trajectory = generate_vehicle_trajectory(fence, num_points, total_distance, error_margin)
        plot_fence_and_trajectory_on_map(fence, trajectory, map_file="vehicle_trajectory2.html")

if __name__ == '__main__':
    unittest.main()
